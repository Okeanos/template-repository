# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# https://docs.github.com/en/actions/writing-workflows
name: Settings

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - settings
  pull_request:
    branches:
      - settings
  # schedule:
  #  - cron: '5 4 * * MON' # ensure settings are regularly restored
  workflow_dispatch:

# prevent parallel runs of this workflow to prevent inconsistent settings
# do not cancel in-progress runs in order to apply all settings of that particular run consistently
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
permissions:
  contents: read
  pull-requests: write

# Ensure all of this is executed within the expected directory
defaults:
  run:
    working-directory: '.github/settings'

jobs:
  settings-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: settings
      - uses: opentofu/setup-opentofu@v1
      - name: OpenTofu fmt
        id: fmt
        run: tofu fmt -check
        continue-on-error: false
      - name: OpenTofu Init
        id: init
        run: tofu init
      - name: OpenTofu Validate
        id: validate
        run: tofu validate -no-color
      - name: OpenTofu Plan
        id: plan
        env:
          # TODO supply a secret here that is actually capable of creating a plan; needs access to the vulnerability alerts
          # https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#check-if-vulnerability-alerts-are-enabled-for-a-repository
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: tofu plan -no-color
        continue-on-error: false
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### OpenTofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            - *Pusher/Trigger:* @${{ github.triggering_actor }}
            - *Action:* \`${{ github.event_name }}\`
            - *Working Directory:* \`${{ env.tf_actions_working_dir }}\`
            - *Workflow:* \`${{ github.workflow }}\``;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  settings-apply:
    runs-on: ubuntu-latest
    needs: settings-review
    if: github.ref_name == 'settings'
    environment: settings
    steps:
      - uses: actions/checkout@v4
        with:
          ref: settings
      - uses: opentofu/setup-opentofu@v1
      - name: OpenTofu fmt
        run: tofu fmt -check
        continue-on-error: false
      - name: OpenTofu Init
        run: tofu init
      - name: OpenTofu Validate
        run: tofu validate
      - name: OpenTofu Plan
        env:
          # TODO supply a secret here that is actually capable of creating a plan; needs access to the vulnerability alerts
          # https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#check-if-vulnerability-alerts-are-enabled-for-a-repository
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: tofu plan
        continue-on-error: false
      - name: OpenTofu Apply
        env:
          # TODO supply a secret here that is actually capable of creating a plan; needs access to the vulnerability alerts
          # https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#check-if-vulnerability-alerts-are-enabled-for-a-repository
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: tofu apply -auto-approve -no-color
